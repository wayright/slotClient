// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: login.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Login.Proto {

  /// <summary>Holder for reflection information generated from login.proto</summary>
  public static partial class LoginReflection {

    #region Descriptor
    /// <summary>File descriptor for login.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtsb2dpbi5wcm90bxILTG9naW4uUHJvdG8ieQoNSW5uZXJMb2dpblJlcRIM",
            "CgRuYW1lGAEgASgJEg4KBnBhc3N3ZBgCIAEoCRIPCgd2ZXJzaW9uGAMgASgJ",
            "Eg4KBndob2FtaRgEIAEoCRILCgNzdmMYBSABKAUSDAoEdHlwZRgGIAEoBRIO",
            "CgZwYXJhbXMYByABKAkiQQoOSW5uZXJMb2dpblJlc3ASDAoEY29kZRgBIAEo",
            "BRIRCgl1bmlxdWVfaWQYAiABKAUSDgoGcGFyYW1zGAMgASgJIi4KE0lubmVy",
            "UXVpY2tMb2dpbkluZm8SCgoCaWQYASABKAMSCwoDa2V5GAIgASgDIjsKCEFk",
            "ZHJJbmZvEg4KBmRvbWFpbhgBIAEoCRIMCgRwb3J0GAIgASgFEhEKCWZyb250",
            "X3VybBgDIAEoCSJ6Cg5RdWlja0xvZ2luSW5mbxIPCgd1c2VyX2lkGAEgASgD",
            "EgsKA2tleRgCIAEoAxIQCghzdmNfbmFtZRgDIAEoCRISCgpzdmNfc3ViX2lk",
            "GAQgASgFEiQKBWFkZHJzGAUgAygLMhUuTG9naW4uUHJvdG8uQWRkckluZm8i",
            "WwoLUmVkaXJlY3RSZXESDwoHdmVyc2lvbhgBIAEoBRILCgNzdmMYAiABKAUS",
            "DwoHc3ViX3N2YxgDIAEoBRIMCgRhcmdzGAQgAygJEg8KB3VzZXJfaWQYBSAB",
            "KAMilQEKDFJlZGlyZWN0UmVzcBIPCgd2ZXJzaW9uGAEgASgFEgsKA3N2YxgC",
            "IAEoBRIPCgdzdWJfc3ZjGAMgASgFEgwKBGFyZ3MYBCADKAkSDgoGZG9tYWlu",
            "GAUgASgJEgwKBHBvcnQYBiABKAUSDwoHdXNlcl9pZBgHIAEoAxILCgNrZXkY",
            "CCABKAMSDAoEY29kZRgJIAEoBUIlChdzdHVkaW8uZmlyc3QucHJvdG8uYmFz",
            "ZUIKTG9naW5Qcm90b2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Login.Proto.InnerLoginReq), global::Login.Proto.InnerLoginReq.Parser, new[]{ "Name", "Passwd", "Version", "Whoami", "Svc", "Type", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Login.Proto.InnerLoginResp), global::Login.Proto.InnerLoginResp.Parser, new[]{ "Code", "UniqueId", "Params" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Login.Proto.InnerQuickLoginInfo), global::Login.Proto.InnerQuickLoginInfo.Parser, new[]{ "Id", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Login.Proto.AddrInfo), global::Login.Proto.AddrInfo.Parser, new[]{ "Domain", "Port", "FrontUrl" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Login.Proto.QuickLoginInfo), global::Login.Proto.QuickLoginInfo.Parser, new[]{ "UserId", "Key", "SvcName", "SvcSubId", "Addrs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Login.Proto.RedirectReq), global::Login.Proto.RedirectReq.Parser, new[]{ "Version", "Svc", "SubSvc", "Args", "UserId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Login.Proto.RedirectResp), global::Login.Proto.RedirectResp.Parser, new[]{ "Version", "Svc", "SubSvc", "Args", "Domain", "Port", "UserId", "Key", "Code" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InnerLoginReq : pb::IMessage<InnerLoginReq> {
    private static readonly pb::MessageParser<InnerLoginReq> _parser = new pb::MessageParser<InnerLoginReq>(() => new InnerLoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InnerLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Login.Proto.LoginReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerLoginReq(InnerLoginReq other) : this() {
      name_ = other.name_;
      passwd_ = other.passwd_;
      version_ = other.version_;
      whoami_ = other.whoami_;
      svc_ = other.svc_;
      type_ = other.type_;
      params_ = other.params_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerLoginReq Clone() {
      return new InnerLoginReq(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// 登录名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passwd" field.</summary>
    public const int PasswdFieldNumber = 2;
    private string passwd_ = "";
    /// <summary>
    /// 登录密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passwd {
      get { return passwd_; }
      set {
        passwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private string version_ = "";
    /// <summary>
    /// 消息版本
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "whoami" field.</summary>
    public const int WhoamiFieldNumber = 4;
    private string whoami_ = "";
    /// <summary>
    /// 来自何人
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Whoami {
      get { return whoami_; }
      set {
        whoami_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "svc" field.</summary>
    public const int SvcFieldNumber = 5;
    private int svc_;
    /// <summary>
    /// 服务编号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Svc {
      get { return svc_; }
      set {
        svc_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 6;
    private int type_;
    /// <summary>
    /// 类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 7;
    private string params_ = "";
    /// <summary>
    /// 其它参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Params {
      get { return params_; }
      set {
        params_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InnerLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InnerLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Passwd != other.Passwd) return false;
      if (Version != other.Version) return false;
      if (Whoami != other.Whoami) return false;
      if (Svc != other.Svc) return false;
      if (Type != other.Type) return false;
      if (Params != other.Params) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Passwd.Length != 0) hash ^= Passwd.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Whoami.Length != 0) hash ^= Whoami.GetHashCode();
      if (Svc != 0) hash ^= Svc.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Params.Length != 0) hash ^= Params.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Passwd.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Passwd);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Version);
      }
      if (Whoami.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Whoami);
      }
      if (Svc != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Svc);
      }
      if (Type != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Type);
      }
      if (Params.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Params);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Passwd.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passwd);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Whoami.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Whoami);
      }
      if (Svc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Svc);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Params.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Params);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InnerLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Passwd.Length != 0) {
        Passwd = other.Passwd;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Whoami.Length != 0) {
        Whoami = other.Whoami;
      }
      if (other.Svc != 0) {
        Svc = other.Svc;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Params.Length != 0) {
        Params = other.Params;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Passwd = input.ReadString();
            break;
          }
          case 26: {
            Version = input.ReadString();
            break;
          }
          case 34: {
            Whoami = input.ReadString();
            break;
          }
          case 40: {
            Svc = input.ReadInt32();
            break;
          }
          case 48: {
            Type = input.ReadInt32();
            break;
          }
          case 58: {
            Params = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InnerLoginResp : pb::IMessage<InnerLoginResp> {
    private static readonly pb::MessageParser<InnerLoginResp> _parser = new pb::MessageParser<InnerLoginResp>(() => new InnerLoginResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InnerLoginResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Login.Proto.LoginReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerLoginResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerLoginResp(InnerLoginResp other) : this() {
      code_ = other.code_;
      uniqueId_ = other.uniqueId_;
      params_ = other.params_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerLoginResp Clone() {
      return new InnerLoginResp(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private int code_;
    /// <summary>
    /// 状态码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 2;
    private int uniqueId_;
    /// <summary>
    /// 分配的全局唯一id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = value;
      }
    }

    /// <summary>Field number for the "params" field.</summary>
    public const int ParamsFieldNumber = 3;
    private string params_ = "";
    /// <summary>
    /// 其它参数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Params {
      get { return params_; }
      set {
        params_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InnerLoginResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InnerLoginResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (UniqueId != other.UniqueId) return false;
      if (Params != other.Params) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (UniqueId != 0) hash ^= UniqueId.GetHashCode();
      if (Params.Length != 0) hash ^= Params.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Code);
      }
      if (UniqueId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(UniqueId);
      }
      if (Params.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Params);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (UniqueId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UniqueId);
      }
      if (Params.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Params);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InnerLoginResp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.UniqueId != 0) {
        UniqueId = other.UniqueId;
      }
      if (other.Params.Length != 0) {
        Params = other.Params;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = input.ReadInt32();
            break;
          }
          case 16: {
            UniqueId = input.ReadInt32();
            break;
          }
          case 26: {
            Params = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InnerQuickLoginInfo : pb::IMessage<InnerQuickLoginInfo> {
    private static readonly pb::MessageParser<InnerQuickLoginInfo> _parser = new pb::MessageParser<InnerQuickLoginInfo>(() => new InnerQuickLoginInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InnerQuickLoginInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Login.Proto.LoginReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerQuickLoginInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerQuickLoginInfo(InnerQuickLoginInfo other) : this() {
      id_ = other.id_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerQuickLoginInfo Clone() {
      return new InnerQuickLoginInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private long key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InnerQuickLoginInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InnerQuickLoginInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InnerQuickLoginInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddrInfo : pb::IMessage<AddrInfo> {
    private static readonly pb::MessageParser<AddrInfo> _parser = new pb::MessageParser<AddrInfo>(() => new AddrInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddrInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Login.Proto.LoginReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddrInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddrInfo(AddrInfo other) : this() {
      domain_ = other.domain_;
      port_ = other.port_;
      frontUrl_ = other.frontUrl_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddrInfo Clone() {
      return new AddrInfo(this);
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 1;
    private string domain_ = "";
    /// <summary>
    /// 服务器域名
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    /// <summary>
    /// 服务器端口
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "front_url" field.</summary>
    public const int FrontUrlFieldNumber = 3;
    private string frontUrl_ = "";
    /// <summary>
    /// 前端资源地址
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FrontUrl {
      get { return frontUrl_; }
      set {
        frontUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddrInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddrInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Domain != other.Domain) return false;
      if (Port != other.Port) return false;
      if (FrontUrl != other.FrontUrl) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (FrontUrl.Length != 0) hash ^= FrontUrl.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Domain.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Domain);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (FrontUrl.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FrontUrl);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (FrontUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FrontUrl);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddrInfo other) {
      if (other == null) {
        return;
      }
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.FrontUrl.Length != 0) {
        FrontUrl = other.FrontUrl;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Domain = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 26: {
            FrontUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuickLoginInfo : pb::IMessage<QuickLoginInfo> {
    private static readonly pb::MessageParser<QuickLoginInfo> _parser = new pb::MessageParser<QuickLoginInfo>(() => new QuickLoginInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuickLoginInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Login.Proto.LoginReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickLoginInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickLoginInfo(QuickLoginInfo other) : this() {
      userId_ = other.userId_;
      key_ = other.key_;
      svcName_ = other.svcName_;
      svcSubId_ = other.svcSubId_;
      addrs_ = other.addrs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuickLoginInfo Clone() {
      return new QuickLoginInfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 玩家ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 2;
    private long key_;
    /// <summary>
    /// 登录key
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "svc_name" field.</summary>
    public const int SvcNameFieldNumber = 3;
    private string svcName_ = "";
    /// <summary>
    /// 服务名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SvcName {
      get { return svcName_; }
      set {
        svcName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "svc_sub_id" field.</summary>
    public const int SvcSubIdFieldNumber = 4;
    private int svcSubId_;
    /// <summary>
    /// 子服务ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SvcSubId {
      get { return svcSubId_; }
      set {
        svcSubId_ = value;
      }
    }

    /// <summary>Field number for the "addrs" field.</summary>
    public const int AddrsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Login.Proto.AddrInfo> _repeated_addrs_codec
        = pb::FieldCodec.ForMessage(42, global::Login.Proto.AddrInfo.Parser);
    private readonly pbc::RepeatedField<global::Login.Proto.AddrInfo> addrs_ = new pbc::RepeatedField<global::Login.Proto.AddrInfo>();
    /// <summary>
    /// 服务器地址列表
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Login.Proto.AddrInfo> Addrs {
      get { return addrs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuickLoginInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuickLoginInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Key != other.Key) return false;
      if (SvcName != other.SvcName) return false;
      if (SvcSubId != other.SvcSubId) return false;
      if(!addrs_.Equals(other.addrs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (SvcName.Length != 0) hash ^= SvcName.GetHashCode();
      if (SvcSubId != 0) hash ^= SvcSubId.GetHashCode();
      hash ^= addrs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (SvcName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SvcName);
      }
      if (SvcSubId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SvcSubId);
      }
      addrs_.WriteTo(output, _repeated_addrs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (SvcName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SvcName);
      }
      if (SvcSubId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SvcSubId);
      }
      size += addrs_.CalculateSize(_repeated_addrs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuickLoginInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.SvcName.Length != 0) {
        SvcName = other.SvcName;
      }
      if (other.SvcSubId != 0) {
        SvcSubId = other.SvcSubId;
      }
      addrs_.Add(other.addrs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 26: {
            SvcName = input.ReadString();
            break;
          }
          case 32: {
            SvcSubId = input.ReadInt32();
            break;
          }
          case 42: {
            addrs_.AddEntriesFrom(input, _repeated_addrs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RedirectReq : pb::IMessage<RedirectReq> {
    private static readonly pb::MessageParser<RedirectReq> _parser = new pb::MessageParser<RedirectReq>(() => new RedirectReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedirectReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Login.Proto.LoginReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectReq(RedirectReq other) : this() {
      version_ = other.version_;
      svc_ = other.svc_;
      subSvc_ = other.subSvc_;
      args_ = other.args_.Clone();
      userId_ = other.userId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectReq Clone() {
      return new RedirectReq(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "svc" field.</summary>
    public const int SvcFieldNumber = 2;
    private int svc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Svc {
      get { return svc_; }
      set {
        svc_ = value;
      }
    }

    /// <summary>Field number for the "sub_svc" field.</summary>
    public const int SubSvcFieldNumber = 3;
    private int subSvc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubSvc {
      get { return subSvc_; }
      set {
        subSvc_ = value;
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 5;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedirectReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedirectReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Svc != other.Svc) return false;
      if (SubSvc != other.SubSvc) return false;
      if(!args_.Equals(other.args_)) return false;
      if (UserId != other.UserId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Svc != 0) hash ^= Svc.GetHashCode();
      if (SubSvc != 0) hash ^= SubSvc.GetHashCode();
      hash ^= args_.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (Svc != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Svc);
      }
      if (SubSvc != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SubSvc);
      }
      args_.WriteTo(output, _repeated_args_codec);
      if (UserId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(UserId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Svc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Svc);
      }
      if (SubSvc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubSvc);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedirectReq other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Svc != 0) {
        Svc = other.Svc;
      }
      if (other.SubSvc != 0) {
        SubSvc = other.SubSvc;
      }
      args_.Add(other.args_);
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            Svc = input.ReadInt32();
            break;
          }
          case 24: {
            SubSvc = input.ReadInt32();
            break;
          }
          case 34: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 40: {
            UserId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RedirectResp : pb::IMessage<RedirectResp> {
    private static readonly pb::MessageParser<RedirectResp> _parser = new pb::MessageParser<RedirectResp>(() => new RedirectResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedirectResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Login.Proto.LoginReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectResp(RedirectResp other) : this() {
      version_ = other.version_;
      svc_ = other.svc_;
      subSvc_ = other.subSvc_;
      args_ = other.args_.Clone();
      domain_ = other.domain_;
      port_ = other.port_;
      userId_ = other.userId_;
      key_ = other.key_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectResp Clone() {
      return new RedirectResp(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 1;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "svc" field.</summary>
    public const int SvcFieldNumber = 2;
    private int svc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Svc {
      get { return svc_; }
      set {
        svc_ = value;
      }
    }

    /// <summary>Field number for the "sub_svc" field.</summary>
    public const int SubSvcFieldNumber = 3;
    private int subSvc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SubSvc {
      get { return subSvc_; }
      set {
        subSvc_ = value;
      }
    }

    /// <summary>Field number for the "args" field.</summary>
    public const int ArgsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_args_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> args_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Args {
      get { return args_; }
    }

    /// <summary>Field number for the "domain" field.</summary>
    public const int DomainFieldNumber = 5;
    private string domain_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Domain {
      get { return domain_; }
      set {
        domain_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 6;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 7;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 8;
    private long key_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 9;
    private int code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedirectResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedirectResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version != other.Version) return false;
      if (Svc != other.Svc) return false;
      if (SubSvc != other.SubSvc) return false;
      if(!args_.Equals(other.args_)) return false;
      if (Domain != other.Domain) return false;
      if (Port != other.Port) return false;
      if (UserId != other.UserId) return false;
      if (Key != other.Key) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Svc != 0) hash ^= Svc.GetHashCode();
      if (SubSvc != 0) hash ^= SubSvc.GetHashCode();
      hash ^= args_.GetHashCode();
      if (Domain.Length != 0) hash ^= Domain.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Key != 0L) hash ^= Key.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Version);
      }
      if (Svc != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Svc);
      }
      if (SubSvc != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SubSvc);
      }
      args_.WriteTo(output, _repeated_args_codec);
      if (Domain.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Domain);
      }
      if (Port != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Port);
      }
      if (UserId != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(UserId);
      }
      if (Key != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(Key);
      }
      if (Code != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Svc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Svc);
      }
      if (SubSvc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubSvc);
      }
      size += args_.CalculateSize(_repeated_args_codec);
      if (Domain.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Domain);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedirectResp other) {
      if (other == null) {
        return;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Svc != 0) {
        Svc = other.Svc;
      }
      if (other.SubSvc != 0) {
        SubSvc = other.SubSvc;
      }
      args_.Add(other.args_);
      if (other.Domain.Length != 0) {
        Domain = other.Domain;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Key != 0L) {
        Key = other.Key;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version = input.ReadInt32();
            break;
          }
          case 16: {
            Svc = input.ReadInt32();
            break;
          }
          case 24: {
            SubSvc = input.ReadInt32();
            break;
          }
          case 34: {
            args_.AddEntriesFrom(input, _repeated_args_codec);
            break;
          }
          case 42: {
            Domain = input.ReadString();
            break;
          }
          case 48: {
            Port = input.ReadInt32();
            break;
          }
          case 56: {
            UserId = input.ReadInt64();
            break;
          }
          case 64: {
            Key = input.ReadInt64();
            break;
          }
          case 72: {
            Code = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
