// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: lion.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lion.Proto {

  /// <summary>Holder for reflection information generated from lion.proto</summary>
  public static partial class LionReflection {

    #region Descriptor
    /// <summary>File descriptor for lion.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpsaW9uLnByb3RvEgpMaW9uLlByb3RvIoIBCgxMaW9uVXNlckluZm8SDwoH",
            "dXNlcl9pZBgBIAEoAxIMCgRnb2xkGAIgASgDEgwKBG5hbWUYAyABKAkSFAoM",
            "aGVhZF9pbWdfdXJsGAQgASgJEg0KBWxldmVsGAUgASgFEhAKCGxvY2F0aW9u",
            "GAYgASgJEg4KBnByYWlzZRgHIAEoBSJsCglUaWdlclN0YXQSDwoHdXNlcl9p",
            "ZBgBIAEoAxIRCgl0b3RhbF93aW4YAiABKAMSEwoLYmlnZ2VzdF93aW4YAyAB",
            "KAMSEQoJd2luX3NwaW5zGAQgASgDEhMKC3RvdGFsX3NwaW5zGAUgASgDQiQK",
            "F3N0dWRpby5maXJzdC5wcm90by5saW9uQglMaW9uUHJvdG9iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lion.Proto.LionUserInfo), global::Lion.Proto.LionUserInfo.Parser, new[]{ "UserId", "Gold", "Name", "HeadImgUrl", "Level", "Location", "Praise" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Lion.Proto.TigerStat), global::Lion.Proto.TigerStat.Parser, new[]{ "UserId", "TotalWin", "BiggestWin", "WinSpins", "TotalSpins" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LionUserInfo : pb::IMessage<LionUserInfo> {
    private static readonly pb::MessageParser<LionUserInfo> _parser = new pb::MessageParser<LionUserInfo>(() => new LionUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LionUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lion.Proto.LionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LionUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LionUserInfo(LionUserInfo other) : this() {
      userId_ = other.userId_;
      gold_ = other.gold_;
      name_ = other.name_;
      headImgUrl_ = other.headImgUrl_;
      level_ = other.level_;
      location_ = other.location_;
      praise_ = other.praise_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LionUserInfo Clone() {
      return new LionUserInfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private long gold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "head_img_url" field.</summary>
    public const int HeadImgUrlFieldNumber = 4;
    private string headImgUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string HeadImgUrl {
      get { return headImgUrl_; }
      set {
        headImgUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 5;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 6;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "praise" field.</summary>
    public const int PraiseFieldNumber = 7;
    private int praise_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Praise {
      get { return praise_; }
      set {
        praise_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LionUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LionUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Gold != other.Gold) return false;
      if (Name != other.Name) return false;
      if (HeadImgUrl != other.HeadImgUrl) return false;
      if (Level != other.Level) return false;
      if (Location != other.Location) return false;
      if (Praise != other.Praise) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (HeadImgUrl.Length != 0) hash ^= HeadImgUrl.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Praise != 0) hash ^= Praise.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Gold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Gold);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HeadImgUrl.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(HeadImgUrl);
      }
      if (Level != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Level);
      }
      if (Location.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Location);
      }
      if (Praise != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Praise);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HeadImgUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HeadImgUrl);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Praise != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Praise);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LionUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.HeadImgUrl.Length != 0) {
        HeadImgUrl = other.HeadImgUrl;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Praise != 0) {
        Praise = other.Praise;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            Gold = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            HeadImgUrl = input.ReadString();
            break;
          }
          case 40: {
            Level = input.ReadInt32();
            break;
          }
          case 50: {
            Location = input.ReadString();
            break;
          }
          case 56: {
            Praise = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TigerStat : pb::IMessage<TigerStat> {
    private static readonly pb::MessageParser<TigerStat> _parser = new pb::MessageParser<TigerStat>(() => new TigerStat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TigerStat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lion.Proto.LionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerStat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerStat(TigerStat other) : this() {
      userId_ = other.userId_;
      totalWin_ = other.totalWin_;
      biggestWin_ = other.biggestWin_;
      winSpins_ = other.winSpins_;
      totalSpins_ = other.totalSpins_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerStat Clone() {
      return new TigerStat(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "total_win" field.</summary>
    public const int TotalWinFieldNumber = 2;
    private long totalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalWin {
      get { return totalWin_; }
      set {
        totalWin_ = value;
      }
    }

    /// <summary>Field number for the "biggest_win" field.</summary>
    public const int BiggestWinFieldNumber = 3;
    private long biggestWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BiggestWin {
      get { return biggestWin_; }
      set {
        biggestWin_ = value;
      }
    }

    /// <summary>Field number for the "win_spins" field.</summary>
    public const int WinSpinsFieldNumber = 4;
    private long winSpins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long WinSpins {
      get { return winSpins_; }
      set {
        winSpins_ = value;
      }
    }

    /// <summary>Field number for the "total_spins" field.</summary>
    public const int TotalSpinsFieldNumber = 5;
    private long totalSpins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSpins {
      get { return totalSpins_; }
      set {
        totalSpins_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TigerStat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TigerStat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (TotalWin != other.TotalWin) return false;
      if (BiggestWin != other.BiggestWin) return false;
      if (WinSpins != other.WinSpins) return false;
      if (TotalSpins != other.TotalSpins) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (TotalWin != 0L) hash ^= TotalWin.GetHashCode();
      if (BiggestWin != 0L) hash ^= BiggestWin.GetHashCode();
      if (WinSpins != 0L) hash ^= WinSpins.GetHashCode();
      if (TotalSpins != 0L) hash ^= TotalSpins.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (TotalWin != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalWin);
      }
      if (BiggestWin != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BiggestWin);
      }
      if (WinSpins != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(WinSpins);
      }
      if (TotalSpins != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalSpins);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (TotalWin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalWin);
      }
      if (BiggestWin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BiggestWin);
      }
      if (WinSpins != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinSpins);
      }
      if (TotalSpins != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalSpins);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TigerStat other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.TotalWin != 0L) {
        TotalWin = other.TotalWin;
      }
      if (other.BiggestWin != 0L) {
        BiggestWin = other.BiggestWin;
      }
      if (other.WinSpins != 0L) {
        WinSpins = other.WinSpins;
      }
      if (other.TotalSpins != 0L) {
        TotalSpins = other.TotalSpins;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            TotalWin = input.ReadInt64();
            break;
          }
          case 24: {
            BiggestWin = input.ReadInt64();
            break;
          }
          case 32: {
            WinSpins = input.ReadInt64();
            break;
          }
          case 40: {
            TotalSpins = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
