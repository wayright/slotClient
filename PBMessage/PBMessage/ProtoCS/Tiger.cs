// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tiger.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tiger.Proto {

  /// <summary>Holder for reflection information generated from tiger.proto</summary>
  public static partial class TigerReflection {

    #region Descriptor
    /// <summary>File descriptor for tiger.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TigerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgt0aWdlci5wcm90bxILVGlnZXIuUHJvdG8iTQoIVGlnZXJSZXESEAoIdGln",
            "ZXJfbm8YASABKAUSDgoGc2VxX25vGAIgASgFEhAKCGJldF9nb2xkGAMgASgD",
            "Eg0KBWxpbmVzGAQgAygFIlcKClRpZ2VyQm9udXMSDAoEbGluZRgBIAEoBRIP",
            "CgdwYXR0ZXJuGAIgASgFEgwKBHR5cGUYAyABKAUSDQoFZGF0YTEYBCABKAUS",
            "DQoFZGF0YTIYBSABKAUiMAoMVGlnZXJDdXJyZW50EgwKBGdvbGQYASABKAMS",
            "EgoKZnJlZV9zcGlucxgCIAEoBSKOAQoJVGlnZXJSZXNwEhAKCHRpZ2VyX25v",
            "GAEgASgFEg4KBnNlcV9ubxgCIAEoBRILCgNwb3MYAyADKAUSJgoFYm9udXMY",
            "BCADKAsyFy5UaWdlci5Qcm90by5UaWdlckJvbnVzEioKB2N1cnJlbnQYBSAB",
            "KAsyGS5UaWdlci5Qcm90by5UaWdlckN1cnJlbnQiLgoNVGlnZXJVc2VySW5m",
            "bxIPCgd1c2VyX2lkGAEgASgDEgwKBGdvbGQYAiABKANCJgoYc3R1ZGlvLmZp",
            "cnN0LnByb3RvLnRpZ2VyQgpUaWdlclByb3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tiger.Proto.TigerReq), global::Tiger.Proto.TigerReq.Parser, new[]{ "TigerNo", "SeqNo", "BetGold", "Lines" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tiger.Proto.TigerBonus), global::Tiger.Proto.TigerBonus.Parser, new[]{ "Line", "Pattern", "Type", "Data1", "Data2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tiger.Proto.TigerCurrent), global::Tiger.Proto.TigerCurrent.Parser, new[]{ "Gold", "FreeSpins" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tiger.Proto.TigerResp), global::Tiger.Proto.TigerResp.Parser, new[]{ "TigerNo", "SeqNo", "Pos", "Bonus", "Current" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tiger.Proto.TigerUserInfo), global::Tiger.Proto.TigerUserInfo.Parser, new[]{ "UserId", "Gold" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TigerReq : pb::IMessage<TigerReq> {
    private static readonly pb::MessageParser<TigerReq> _parser = new pb::MessageParser<TigerReq>(() => new TigerReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TigerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tiger.Proto.TigerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerReq(TigerReq other) : this() {
      tigerNo_ = other.tigerNo_;
      seqNo_ = other.seqNo_;
      betGold_ = other.betGold_;
      lines_ = other.lines_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerReq Clone() {
      return new TigerReq(this);
    }

    /// <summary>Field number for the "tiger_no" field.</summary>
    public const int TigerNoFieldNumber = 1;
    private int tigerNo_;
    /// <summary>
    /// 第几台机器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TigerNo {
      get { return tigerNo_; }
      set {
        tigerNo_ = value;
      }
    }

    /// <summary>Field number for the "seq_no" field.</summary>
    public const int SeqNoFieldNumber = 2;
    private int seqNo_;
    /// <summary>
    /// 前端自身序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqNo {
      get { return seqNo_; }
      set {
        seqNo_ = value;
      }
    }

    /// <summary>Field number for the "bet_gold" field.</summary>
    public const int BetGoldFieldNumber = 3;
    private long betGold_;
    /// <summary>
    /// 每个投注金额
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BetGold {
      get { return betGold_; }
      set {
        betGold_ = value;
      }
    }

    /// <summary>Field number for the "lines" field.</summary>
    public const int LinesFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_lines_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> lines_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 用户选择的payline索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Lines {
      get { return lines_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TigerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TigerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TigerNo != other.TigerNo) return false;
      if (SeqNo != other.SeqNo) return false;
      if (BetGold != other.BetGold) return false;
      if(!lines_.Equals(other.lines_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TigerNo != 0) hash ^= TigerNo.GetHashCode();
      if (SeqNo != 0) hash ^= SeqNo.GetHashCode();
      if (BetGold != 0L) hash ^= BetGold.GetHashCode();
      hash ^= lines_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TigerNo != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TigerNo);
      }
      if (SeqNo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeqNo);
      }
      if (BetGold != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BetGold);
      }
      lines_.WriteTo(output, _repeated_lines_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TigerNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TigerNo);
      }
      if (SeqNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeqNo);
      }
      if (BetGold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BetGold);
      }
      size += lines_.CalculateSize(_repeated_lines_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TigerReq other) {
      if (other == null) {
        return;
      }
      if (other.TigerNo != 0) {
        TigerNo = other.TigerNo;
      }
      if (other.SeqNo != 0) {
        SeqNo = other.SeqNo;
      }
      if (other.BetGold != 0L) {
        BetGold = other.BetGold;
      }
      lines_.Add(other.lines_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TigerNo = input.ReadInt32();
            break;
          }
          case 16: {
            SeqNo = input.ReadInt32();
            break;
          }
          case 24: {
            BetGold = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            lines_.AddEntriesFrom(input, _repeated_lines_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TigerBonus : pb::IMessage<TigerBonus> {
    private static readonly pb::MessageParser<TigerBonus> _parser = new pb::MessageParser<TigerBonus>(() => new TigerBonus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TigerBonus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tiger.Proto.TigerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerBonus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerBonus(TigerBonus other) : this() {
      line_ = other.line_;
      pattern_ = other.pattern_;
      type_ = other.type_;
      data1_ = other.data1_;
      data2_ = other.data2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerBonus Clone() {
      return new TigerBonus(this);
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 1;
    private int line_;
    /// <summary>
    /// payline索引
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Line {
      get { return line_; }
      set {
        line_ = value;
      }
    }

    /// <summary>Field number for the "pattern" field.</summary>
    public const int PatternFieldNumber = 2;
    private int pattern_;
    /// <summary>
    /// 中了哪种牌型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pattern {
      get { return pattern_; }
      set {
        pattern_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private int type_;
    /// <summary>
    /// 奖励类型，1=倍数，2=金币，3=免费局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "data1" field.</summary>
    public const int Data1FieldNumber = 4;
    private int data1_;
    /// <summary>
    /// 数据1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data1 {
      get { return data1_; }
      set {
        data1_ = value;
      }
    }

    /// <summary>Field number for the "data2" field.</summary>
    public const int Data2FieldNumber = 5;
    private int data2_;
    /// <summary>
    /// 数据2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Data2 {
      get { return data2_; }
      set {
        data2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TigerBonus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TigerBonus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Line != other.Line) return false;
      if (Pattern != other.Pattern) return false;
      if (Type != other.Type) return false;
      if (Data1 != other.Data1) return false;
      if (Data2 != other.Data2) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Line != 0) hash ^= Line.GetHashCode();
      if (Pattern != 0) hash ^= Pattern.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Data1 != 0) hash ^= Data1.GetHashCode();
      if (Data2 != 0) hash ^= Data2.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Line != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Line);
      }
      if (Pattern != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pattern);
      }
      if (Type != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Type);
      }
      if (Data1 != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Data1);
      }
      if (Data2 != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Data2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Line != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
      }
      if (Pattern != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pattern);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Data1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data1);
      }
      if (Data2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data2);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TigerBonus other) {
      if (other == null) {
        return;
      }
      if (other.Line != 0) {
        Line = other.Line;
      }
      if (other.Pattern != 0) {
        Pattern = other.Pattern;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Data1 != 0) {
        Data1 = other.Data1;
      }
      if (other.Data2 != 0) {
        Data2 = other.Data2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Line = input.ReadInt32();
            break;
          }
          case 16: {
            Pattern = input.ReadInt32();
            break;
          }
          case 24: {
            Type = input.ReadInt32();
            break;
          }
          case 32: {
            Data1 = input.ReadInt32();
            break;
          }
          case 40: {
            Data2 = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TigerCurrent : pb::IMessage<TigerCurrent> {
    private static readonly pb::MessageParser<TigerCurrent> _parser = new pb::MessageParser<TigerCurrent>(() => new TigerCurrent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TigerCurrent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tiger.Proto.TigerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerCurrent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerCurrent(TigerCurrent other) : this() {
      gold_ = other.gold_;
      freeSpins_ = other.freeSpins_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerCurrent Clone() {
      return new TigerCurrent(this);
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 1;
    private long gold_;
    /// <summary>
    /// 当前金币
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    /// <summary>Field number for the "free_spins" field.</summary>
    public const int FreeSpinsFieldNumber = 2;
    private int freeSpins_;
    /// <summary>
    /// 当前剩余免费局
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreeSpins {
      get { return freeSpins_; }
      set {
        freeSpins_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TigerCurrent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TigerCurrent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Gold != other.Gold) return false;
      if (FreeSpins != other.FreeSpins) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (FreeSpins != 0) hash ^= FreeSpins.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Gold != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Gold);
      }
      if (FreeSpins != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FreeSpins);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (FreeSpins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreeSpins);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TigerCurrent other) {
      if (other == null) {
        return;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      if (other.FreeSpins != 0) {
        FreeSpins = other.FreeSpins;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Gold = input.ReadInt64();
            break;
          }
          case 16: {
            FreeSpins = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TigerResp : pb::IMessage<TigerResp> {
    private static readonly pb::MessageParser<TigerResp> _parser = new pb::MessageParser<TigerResp>(() => new TigerResp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TigerResp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tiger.Proto.TigerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerResp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerResp(TigerResp other) : this() {
      tigerNo_ = other.tigerNo_;
      seqNo_ = other.seqNo_;
      pos_ = other.pos_.Clone();
      bonus_ = other.bonus_.Clone();
      Current = other.current_ != null ? other.Current.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerResp Clone() {
      return new TigerResp(this);
    }

    /// <summary>Field number for the "tiger_no" field.</summary>
    public const int TigerNoFieldNumber = 1;
    private int tigerNo_;
    /// <summary>
    /// 第几台机器
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TigerNo {
      get { return tigerNo_; }
      set {
        tigerNo_ = value;
      }
    }

    /// <summary>Field number for the "seq_no" field.</summary>
    public const int SeqNoFieldNumber = 2;
    private int seqNo_;
    /// <summary>
    /// 前端自身序号
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SeqNo {
      get { return seqNo_; }
      set {
        seqNo_ = value;
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_pos_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> pos_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 结果数组，代表每一列摇到的位置
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Pos {
      get { return pos_; }
    }

    /// <summary>Field number for the "bonus" field.</summary>
    public const int BonusFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Tiger.Proto.TigerBonus> _repeated_bonus_codec
        = pb::FieldCodec.ForMessage(34, global::Tiger.Proto.TigerBonus.Parser);
    private readonly pbc::RepeatedField<global::Tiger.Proto.TigerBonus> bonus_ = new pbc::RepeatedField<global::Tiger.Proto.TigerBonus>();
    /// <summary>
    /// 中奖信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tiger.Proto.TigerBonus> Bonus {
      get { return bonus_; }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 5;
    private global::Tiger.Proto.TigerCurrent current_;
    /// <summary>
    /// 当前值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tiger.Proto.TigerCurrent Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TigerResp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TigerResp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TigerNo != other.TigerNo) return false;
      if (SeqNo != other.SeqNo) return false;
      if(!pos_.Equals(other.pos_)) return false;
      if(!bonus_.Equals(other.bonus_)) return false;
      if (!object.Equals(Current, other.Current)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TigerNo != 0) hash ^= TigerNo.GetHashCode();
      if (SeqNo != 0) hash ^= SeqNo.GetHashCode();
      hash ^= pos_.GetHashCode();
      hash ^= bonus_.GetHashCode();
      if (current_ != null) hash ^= Current.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TigerNo != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TigerNo);
      }
      if (SeqNo != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SeqNo);
      }
      pos_.WriteTo(output, _repeated_pos_codec);
      bonus_.WriteTo(output, _repeated_bonus_codec);
      if (current_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Current);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TigerNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TigerNo);
      }
      if (SeqNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SeqNo);
      }
      size += pos_.CalculateSize(_repeated_pos_codec);
      size += bonus_.CalculateSize(_repeated_bonus_codec);
      if (current_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Current);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TigerResp other) {
      if (other == null) {
        return;
      }
      if (other.TigerNo != 0) {
        TigerNo = other.TigerNo;
      }
      if (other.SeqNo != 0) {
        SeqNo = other.SeqNo;
      }
      pos_.Add(other.pos_);
      bonus_.Add(other.bonus_);
      if (other.current_ != null) {
        if (current_ == null) {
          current_ = new global::Tiger.Proto.TigerCurrent();
        }
        Current.MergeFrom(other.Current);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TigerNo = input.ReadInt32();
            break;
          }
          case 16: {
            SeqNo = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            pos_.AddEntriesFrom(input, _repeated_pos_codec);
            break;
          }
          case 34: {
            bonus_.AddEntriesFrom(input, _repeated_bonus_codec);
            break;
          }
          case 42: {
            if (current_ == null) {
              current_ = new global::Tiger.Proto.TigerCurrent();
            }
            input.ReadMessage(current_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TigerUserInfo : pb::IMessage<TigerUserInfo> {
    private static readonly pb::MessageParser<TigerUserInfo> _parser = new pb::MessageParser<TigerUserInfo>(() => new TigerUserInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TigerUserInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tiger.Proto.TigerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerUserInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerUserInfo(TigerUserInfo other) : this() {
      userId_ = other.userId_;
      gold_ = other.gold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TigerUserInfo Clone() {
      return new TigerUserInfo(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    /// 玩家id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "gold" field.</summary>
    public const int GoldFieldNumber = 2;
    private long gold_;
    /// <summary>
    /// 玩家金币数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TigerUserInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TigerUserInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (Gold != other.Gold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (Gold != 0L) hash ^= Gold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (Gold != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (Gold != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Gold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TigerUserInfo other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.Gold != 0L) {
        Gold = other.Gold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            Gold = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
